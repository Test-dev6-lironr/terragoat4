plugins {
    id "com.marksandspencer.code-analysis" version "1.0.7"
    id "com.marksandspencer.acceptance-test" version "1.0.2"
    id "com.marksandspencer.system-test" version "1.0.0"
    id "com.marksandspencer.integration-test" version "1.0.1"
    id "com.bmuschko.docker-remote-api" version "3.0.7"
}

apply plugin: "application"
apply plugin: "com.bmuschko.docker-java-application"

group = "api-services"
mainClassName = "com.marksandspencer.sapmessagepersister.SapMessagePersisterApplication server app-config.yml"
project.version = project.hasProperty("projVersion") ? project["projVersion"] : "test"

static def lookupRegistry() {
    System.getenv("AWS_ECR_REGISTRY_URL") ?: "registry-apis-services.platform.mnscorp.net"
}

def registry = lookupRegistry()

dependencies {
    compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-auth:${dropwizardVersion}"
    compile "com.googlecode.totallylazy:totallylazy:2.258"
    compile "org.apache.kafka:kafka-clients:0.10.2.2"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "io.github.daviddenton:configur8:1.1.3"
    compile "com.amazonaws:aws-java-sdk-s3:1.12.261"
    compile "io.prometheus:simpleclient:0.0.23"
    compile "io.prometheus:simpleclient_servlet:0.0.23"
    compile "io.prometheus:simpleclient_dropwizard:0.0.23"
    compile project(":common")
    compile project(":dropwizard-logging")

    testCompile "junit:junit:4.13.1"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "io.dropwizard:dropwizard-testing:1.0.5"
    testCompile "com.github.docker-java:docker-java:3.0.6"
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile "com.jayway.awaitility:awaitility:1.7.0"
    testCompile project(":common-test")
}

docker {
    url = lookupDockerHost()
    certPath = lookupSslKeysDirectory()
    registryCredentials {
        if (!(System.getenv("AWS_ECR_REGISTRY_URL"))) {
                url = registry + "/v2"
        } else {
                url = registry
        }    
        username = lookupRegistryUsername()
        password = lookupRegistryPassword()
    }

    javaApplication {
        baseImage = "openjdk:8u121-jdk"
        maintainer = "Aries Team 'grp-dotcom-services-team@mnscorp.onmicrosoft.com'"
        ports = [8080, 8081]
        tag = "${registry}/${group}/${name}:${project.version}"
    }
}

run {
    args "server", "app-config.yml"
}

task startAppContainer {
    dependsOn dockerBuildImage, ":startKafkaContainer"

    doFirst {
        ext.appContainer = startDropwizardAppContainer(project.name,project.version,"${registry}/"+ project.group +"/",
                "AUTH_USER_1_USERNAME=validUsername",
                "AUTH_USER_1_PASSWORD=validPassword",
                "KAFKA_HOST=$kafkaHost",
                "KAFKA_PORT=$kafkaPort",
                "S3_USE_DUMMY_IMPLEMENTATION=true")
				
    }
}

task removeAppContainer {
    doFirst {
        stopAndRemoveAppContainer(project.name)
        removeKafkaContainer()
    }
}


def lookupRegistryUsername() {
    System.getenv("AWS_ECR_REGISTRY_USERNAME") ?: lookupDockerRegistryUser()
}

def lookupRegistryPassword() {
    System.getenv("AWS_ECR_REGISTRY_PASSWORD") ?: lookupDockerRegistryPassword()
}
